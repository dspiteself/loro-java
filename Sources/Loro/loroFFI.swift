// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(loroFFI)
import loroFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_loro_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_loro_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol CursorProtocol : AnyObject {
    
}

open class Cursor:
    CursorProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_cursor(self.pointer, $0) }
    }
public convenience init(id: Id?, container: ContainerId, side: Side, originPos: UInt32) {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_cursor_new(
        FfiConverterOptionTypeID.lower(id),
        FfiConverterTypeContainerID.lower(container),
        FfiConverterTypeSide.lower(side),
        FfiConverterUInt32.lower(originPos),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_cursor(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeCursor: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Cursor

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Cursor {
        return Cursor(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Cursor) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Cursor {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Cursor, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeCursor_lift(_ pointer: UnsafeMutableRawPointer) throws -> Cursor {
    return try FfiConverterTypeCursor.lift(pointer)
}

public func FfiConverterTypeCursor_lower(_ value: Cursor) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCursor.lower(value)
}




public protocol FrontiersProtocol : AnyObject {
    
}

open class Frontiers:
    FrontiersProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_frontiers(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_frontiers(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeFrontiers: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Frontiers

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Frontiers {
        return Frontiers(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Frontiers) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Frontiers {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Frontiers, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeFrontiers_lift(_ pointer: UnsafeMutableRawPointer) throws -> Frontiers {
    return try FfiConverterTypeFrontiers.lift(pointer)
}

public func FfiConverterTypeFrontiers_lower(_ value: Frontiers) -> UnsafeMutableRawPointer {
    return FfiConverterTypeFrontiers.lower(value)
}




public protocol IdSpanProtocol : AnyObject {
    
}

open class IdSpan:
    IdSpanProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_idspan(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_idspan(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeIdSpan: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = IdSpan

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> IdSpan {
        return IdSpan(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: IdSpan) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IdSpan {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: IdSpan, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeIdSpan_lift(_ pointer: UnsafeMutableRawPointer) throws -> IdSpan {
    return try FfiConverterTypeIdSpan.lift(pointer)
}

public func FfiConverterTypeIdSpan_lower(_ value: IdSpan) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIdSpan.lower(value)
}




public protocol LoroCounterProtocol : AnyObject {
    
}

open class LoroCounter:
    LoroCounterProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorocounter(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_lorocounter_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorocounter(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeLoroCounter: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroCounter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroCounter {
        return LoroCounter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroCounter) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroCounter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroCounter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeLoroCounter_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroCounter {
    return try FfiConverterTypeLoroCounter.lift(pointer)
}

public func FfiConverterTypeLoroCounter_lower(_ value: LoroCounter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroCounter.lower(value)
}




public protocol LoroDocProtocol : AnyObject {
    
    func attach() 
    
    func checkStateCorrectnessSlow() 
    
    func checkout(frontiers: Frontiers) throws 
    
    func checkoutToLatest() 
    
    func commit() 
    
    func detach() 
    
    func exportFrom(vv: VersionVector)  -> Data
    
    func exportSnapshot()  -> Data
    
    func fork()  -> LoroDoc
    
    func frontiersToVv(frontiers: Frontiers)  -> VersionVector?
    
    func getCounter(id: String)  -> LoroCounter
    
    func getDeepValue()  -> LoroValue
    
    func getList(id: String)  -> LoroList
    
    func getMap(id: String)  -> LoroMap
    
    func getMovableList(id: String)  -> LoroMovableList
    
    func getText(id: String)  -> LoroText
    
    func getTree(id: String)  -> LoroTree
    
    func `import`(bytes: Data) throws 
    
    func importBatch(bytes: [Data]) throws 
    
    func importWith(bytes: Data, origin: String) throws 
    
    func isDetached()  -> Bool
    
    func lenChanges()  -> UInt64
    
    func lenOps()  -> UInt64
    
    func logEstimateSize() 
    
    func oplogFrontiers()  -> Frontiers
    
    func oplogVv()  -> VersionVector
    
    func peerId()  -> UInt64
    
    func setChangeMergeInterval(interval: Int64) 
    
    func setFractionalIndexJitter(jitter: UInt8) 
    
    func setPeerId(peer: UInt64) throws 
    
    func setRecordTimestamp(record: Bool) 
    
    func stateFrontiers()  -> Frontiers
    
    func stateVv()  -> VersionVector
    
    func unsubscribe(subId: SubId) 
    
    func vvToFrontiers(vv: VersionVector)  -> Frontiers
    
}

open class LoroDoc:
    LoroDocProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorodoc(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_lorodoc_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorodoc(pointer, $0) }
    }

    

    
open func attach() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_attach(self.uniffiClonePointer(),$0
    )
}
}
    
open func checkStateCorrectnessSlow() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_check_state_correctness_slow(self.uniffiClonePointer(),$0
    )
}
}
    
open func checkout(frontiers: Frontiers)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_checkout(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(frontiers),$0
    )
}
}
    
open func checkoutToLatest() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_checkout_to_latest(self.uniffiClonePointer(),$0
    )
}
}
    
open func commit() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_commit(self.uniffiClonePointer(),$0
    )
}
}
    
open func detach() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_detach(self.uniffiClonePointer(),$0
    )
}
}
    
open func exportFrom(vv: VersionVector) -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_export_from(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(vv),$0
    )
})
}
    
open func exportSnapshot() -> Data {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_export_snapshot(self.uniffiClonePointer(),$0
    )
})
}
    
open func fork() -> LoroDoc {
    return try!  FfiConverterTypeLoroDoc.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_fork(self.uniffiClonePointer(),$0
    )
})
}
    
open func frontiersToVv(frontiers: Frontiers) -> VersionVector? {
    return try!  FfiConverterOptionTypeVersionVector.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_frontiers_to_vv(self.uniffiClonePointer(),
        FfiConverterTypeFrontiers.lower(frontiers),$0
    )
})
}
    
open func getCounter(id: String) -> LoroCounter {
    return try!  FfiConverterTypeLoroCounter.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_counter(self.uniffiClonePointer(),
        FfiConverterString.lower(id),$0
    )
})
}
    
open func getDeepValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_deep_value(self.uniffiClonePointer(),$0
    )
})
}
    
open func getList(id: String) -> LoroList {
    return try!  FfiConverterTypeLoroList.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_list(self.uniffiClonePointer(),
        FfiConverterString.lower(id),$0
    )
})
}
    
open func getMap(id: String) -> LoroMap {
    return try!  FfiConverterTypeLoroMap.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_map(self.uniffiClonePointer(),
        FfiConverterString.lower(id),$0
    )
})
}
    
open func getMovableList(id: String) -> LoroMovableList {
    return try!  FfiConverterTypeLoroMovableList.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_movable_list(self.uniffiClonePointer(),
        FfiConverterString.lower(id),$0
    )
})
}
    
open func getText(id: String) -> LoroText {
    return try!  FfiConverterTypeLoroText.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_text(self.uniffiClonePointer(),
        FfiConverterString.lower(id),$0
    )
})
}
    
open func getTree(id: String) -> LoroTree {
    return try!  FfiConverterTypeLoroTree.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_get_tree(self.uniffiClonePointer(),
        FfiConverterString.lower(id),$0
    )
})
}
    
open func `import`(bytes: Data)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_import(self.uniffiClonePointer(),
        FfiConverterData.lower(bytes),$0
    )
}
}
    
open func importBatch(bytes: [Data])throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_import_batch(self.uniffiClonePointer(),
        FfiConverterSequenceData.lower(bytes),$0
    )
}
}
    
open func importWith(bytes: Data, origin: String)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_import_with(self.uniffiClonePointer(),
        FfiConverterData.lower(bytes),
        FfiConverterString.lower(origin),$0
    )
}
}
    
open func isDetached() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_is_detached(self.uniffiClonePointer(),$0
    )
})
}
    
open func lenChanges() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_len_changes(self.uniffiClonePointer(),$0
    )
})
}
    
open func lenOps() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_len_ops(self.uniffiClonePointer(),$0
    )
})
}
    
open func logEstimateSize() {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_log_estimate_size(self.uniffiClonePointer(),$0
    )
}
}
    
open func oplogFrontiers() -> Frontiers {
    return try!  FfiConverterTypeFrontiers.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_oplog_frontiers(self.uniffiClonePointer(),$0
    )
})
}
    
open func oplogVv() -> VersionVector {
    return try!  FfiConverterTypeVersionVector.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_oplog_vv(self.uniffiClonePointer(),$0
    )
})
}
    
open func peerId() -> UInt64 {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_peer_id(self.uniffiClonePointer(),$0
    )
})
}
    
open func setChangeMergeInterval(interval: Int64) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_set_change_merge_interval(self.uniffiClonePointer(),
        FfiConverterInt64.lower(interval),$0
    )
}
}
    
open func setFractionalIndexJitter(jitter: UInt8) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_set_fractional_index_jitter(self.uniffiClonePointer(),
        FfiConverterUInt8.lower(jitter),$0
    )
}
}
    
open func setPeerId(peer: UInt64)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorodoc_set_peer_id(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(peer),$0
    )
}
}
    
open func setRecordTimestamp(record: Bool) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_set_record_timestamp(self.uniffiClonePointer(),
        FfiConverterBool.lower(record),$0
    )
}
}
    
open func stateFrontiers() -> Frontiers {
    return try!  FfiConverterTypeFrontiers.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_state_frontiers(self.uniffiClonePointer(),$0
    )
})
}
    
open func stateVv() -> VersionVector {
    return try!  FfiConverterTypeVersionVector.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_state_vv(self.uniffiClonePointer(),$0
    )
})
}
    
open func unsubscribe(subId: SubId) {try! rustCall() {
    uniffi_loro_fn_method_lorodoc_unsubscribe(self.uniffiClonePointer(),
        FfiConverterTypeSubID.lower(subId),$0
    )
}
}
    
open func vvToFrontiers(vv: VersionVector) -> Frontiers {
    return try!  FfiConverterTypeFrontiers.lift(try! rustCall() {
    uniffi_loro_fn_method_lorodoc_vv_to_frontiers(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(vv),$0
    )
})
}
    

}

public struct FfiConverterTypeLoroDoc: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroDoc

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroDoc {
        return LoroDoc(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroDoc) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroDoc {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroDoc, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeLoroDoc_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroDoc {
    return try FfiConverterTypeLoroDoc.lift(pointer)
}

public func FfiConverterTypeLoroDoc_lower(_ value: LoroDoc) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroDoc.lower(value)
}




public protocol LoroListProtocol : AnyObject {
    
    func delete(pos: UInt32, len: UInt32) throws 
    
    func get(index: UInt32)  -> ValueOrContainer?
    
    func getCursor(pos: UInt32, side: Side)  -> Cursor?
    
    func getDeepValue()  -> LoroValue
    
    func getValue()  -> LoroValue
    
    func id()  -> ContainerId
    
    func insert(pos: UInt32, v: LoroValueLike) throws 
    
    func insertCounterContainer(pos: UInt32, child: LoroCounter) throws  -> LoroCounter
    
    func insertListContainer(pos: UInt32, child: LoroList) throws  -> LoroList
    
    func insertMapContainer(pos: UInt32, child: LoroMap) throws  -> LoroMap
    
    func insertMovableListContainer(pos: UInt32, child: LoroMovableList) throws  -> LoroMovableList
    
    func insertTextContainer(pos: UInt32, child: LoroText) throws  -> LoroText
    
    func insertTreeContainer(pos: UInt32, child: LoroTree) throws  -> LoroTree
    
    func pop() throws  -> LoroValue?
    
    func push(v: LoroValueLike) throws 
    
}

open class LoroList:
    LoroListProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorolist(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_lorolist_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorolist(pointer, $0) }
    }

    

    
open func delete(pos: UInt32, len: UInt32)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_delete(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterUInt32.lower(len),$0
    )
}
}
    
open func get(index: UInt32) -> ValueOrContainer? {
    return try!  FfiConverterOptionTypeValueOrContainer.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_get(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(index),$0
    )
})
}
    
open func getCursor(pos: UInt32, side: Side) -> Cursor? {
    return try!  FfiConverterOptionTypeCursor.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_get_cursor(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeSide.lower(side),$0
    )
})
}
    
open func getDeepValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_get_deep_value(self.uniffiClonePointer(),$0
    )
})
}
    
open func getValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_get_value(self.uniffiClonePointer(),$0
    )
})
}
    
open func id() -> ContainerId {
    return try!  FfiConverterTypeContainerID.lift(try! rustCall() {
    uniffi_loro_fn_method_lorolist_id(self.uniffiClonePointer(),$0
    )
})
}
    
open func insert(pos: UInt32, v: LoroValueLike)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroValueLike.lower(v),$0
    )
}
}
    
open func insertCounterContainer(pos: UInt32, child: LoroCounter)throws  -> LoroCounter {
    return try  FfiConverterTypeLoroCounter.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert_counter_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroCounter.lower(child),$0
    )
})
}
    
open func insertListContainer(pos: UInt32, child: LoroList)throws  -> LoroList {
    return try  FfiConverterTypeLoroList.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert_list_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroList.lower(child),$0
    )
})
}
    
open func insertMapContainer(pos: UInt32, child: LoroMap)throws  -> LoroMap {
    return try  FfiConverterTypeLoroMap.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert_map_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroMap.lower(child),$0
    )
})
}
    
open func insertMovableListContainer(pos: UInt32, child: LoroMovableList)throws  -> LoroMovableList {
    return try  FfiConverterTypeLoroMovableList.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert_movable_list_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroMovableList.lower(child),$0
    )
})
}
    
open func insertTextContainer(pos: UInt32, child: LoroText)throws  -> LoroText {
    return try  FfiConverterTypeLoroText.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert_text_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroText.lower(child),$0
    )
})
}
    
open func insertTreeContainer(pos: UInt32, child: LoroTree)throws  -> LoroTree {
    return try  FfiConverterTypeLoroTree.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_insert_tree_container(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterTypeLoroTree.lower(child),$0
    )
})
}
    
open func pop()throws  -> LoroValue? {
    return try  FfiConverterOptionTypeLoroValue.lift(try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_pop(self.uniffiClonePointer(),$0
    )
})
}
    
open func push(v: LoroValueLike)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorolist_push(self.uniffiClonePointer(),
        FfiConverterTypeLoroValueLike.lower(v),$0
    )
}
}
    

}

public struct FfiConverterTypeLoroList: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroList

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroList {
        return LoroList(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroList) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroList {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroList, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeLoroList_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroList {
    return try FfiConverterTypeLoroList.lift(pointer)
}

public func FfiConverterTypeLoroList_lower(_ value: LoroList) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroList.lower(value)
}




public protocol LoroMapProtocol : AnyObject {
    
}

open class LoroMap:
    LoroMapProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_loromap(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_loromap_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_loromap(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeLoroMap: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroMap

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroMap {
        return LoroMap(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroMap) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroMap {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroMap, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeLoroMap_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroMap {
    return try FfiConverterTypeLoroMap.lift(pointer)
}

public func FfiConverterTypeLoroMap_lower(_ value: LoroMap) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroMap.lower(value)
}




public protocol LoroMovableListProtocol : AnyObject {
    
}

open class LoroMovableList:
    LoroMovableListProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_loromovablelist(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_loromovablelist_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_loromovablelist(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeLoroMovableList: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroMovableList

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroMovableList {
        return LoroMovableList(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroMovableList) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroMovableList {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroMovableList, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeLoroMovableList_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroMovableList {
    return try FfiConverterTypeLoroMovableList.lift(pointer)
}

public func FfiConverterTypeLoroMovableList_lower(_ value: LoroMovableList) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroMovableList.lower(value)
}




public protocol LoroTextProtocol : AnyObject {
    
    func insert(pos: UInt32, s: String) throws 
    
    func toString()  -> String
    
}

open class LoroText:
    LoroTextProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorotext(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_lorotext_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorotext(pointer, $0) }
    }

    

    
open func insert(pos: UInt32, s: String)throws  {try rustCallWithError(FfiConverterTypeLoroError.lift) {
    uniffi_loro_fn_method_lorotext_insert(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(pos),
        FfiConverterString.lower(s),$0
    )
}
}
    
open func toString() -> String {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_loro_fn_method_lorotext_to_string(self.uniffiClonePointer(),$0
    )
})
}
    

}

public struct FfiConverterTypeLoroText: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroText

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroText {
        return LoroText(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroText) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroText {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroText, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeLoroText_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroText {
    return try FfiConverterTypeLoroText.lift(pointer)
}

public func FfiConverterTypeLoroText_lower(_ value: LoroText) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroText.lower(value)
}




public protocol LoroTreeProtocol : AnyObject {
    
}

open class LoroTree:
    LoroTreeProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorotree(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_lorotree_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorotree(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeLoroTree: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroTree

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroTree {
        return LoroTree(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroTree) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroTree {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroTree, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeLoroTree_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroTree {
    return try FfiConverterTypeLoroTree.lift(pointer)
}

public func FfiConverterTypeLoroTree_lower(_ value: LoroTree) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroTree.lower(value)
}




public protocol LoroUnknownProtocol : AnyObject {
    
}

open class LoroUnknown:
    LoroUnknownProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorounknown(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorounknown(pointer, $0) }
    }

    

    

}

public struct FfiConverterTypeLoroUnknown: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroUnknown

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroUnknown {
        return LoroUnknown(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroUnknown) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroUnknown {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroUnknown, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeLoroUnknown_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroUnknown {
    return try FfiConverterTypeLoroUnknown.lift(pointer)
}

public func FfiConverterTypeLoroUnknown_lower(_ value: LoroUnknown) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroUnknown.lower(value)
}




public protocol LoroValueLike : AnyObject {
    
    func asLoroValue()  -> LoroValue
    
}

open class LoroValueLikeImpl:
    LoroValueLike {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_lorovaluelike(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_lorovaluelike(pointer, $0) }
    }

    

    
open func asLoroValue() -> LoroValue {
    return try!  FfiConverterTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_lorovaluelike_as_loro_value(self.uniffiClonePointer(),$0
    )
})
}
    

}
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceLoroValueLike {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceLoroValueLike = UniffiVTableCallbackInterfaceLoroValueLike(
        asLoroValue: { (
            uniffiHandle: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> LoroValue in
                guard let uniffiObj = try? FfiConverterTypeLoroValueLike.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.asLoroValue(
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterTypeLoroValue.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeLoroValueLike.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface LoroValueLike: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitLoroValueLike() {
    uniffi_loro_fn_init_callback_vtable_lorovaluelike(&UniffiCallbackInterfaceLoroValueLike.vtable)
}

public struct FfiConverterTypeLoroValueLike: FfiConverter {
    fileprivate static var handleMap = UniffiHandleMap<LoroValueLike>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LoroValueLike

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroValueLike {
        return LoroValueLikeImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LoroValueLike) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroValueLike {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LoroValueLike, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeLoroValueLike_lift(_ pointer: UnsafeMutableRawPointer) throws -> LoroValueLike {
    return try FfiConverterTypeLoroValueLike.lift(pointer)
}

public func FfiConverterTypeLoroValueLike_lower(_ value: LoroValueLike) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLoroValueLike.lower(value)
}




public protocol ValueOrContainerProtocol : AnyObject {
    
    func asContainer()  -> ContainerId?
    
    func asValue()  -> LoroValue?
    
    func isContainer()  -> Bool
    
    func isValue()  -> Bool
    
}

open class ValueOrContainer:
    ValueOrContainerProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_valueorcontainer(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_valueorcontainer(pointer, $0) }
    }

    

    
open func asContainer() -> ContainerId? {
    return try!  FfiConverterOptionTypeContainerID.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_as_container(self.uniffiClonePointer(),$0
    )
})
}
    
open func asValue() -> LoroValue? {
    return try!  FfiConverterOptionTypeLoroValue.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_as_value(self.uniffiClonePointer(),$0
    )
})
}
    
open func isContainer() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_is_container(self.uniffiClonePointer(),$0
    )
})
}
    
open func isValue() -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_valueorcontainer_is_value(self.uniffiClonePointer(),$0
    )
})
}
    

}

public struct FfiConverterTypeValueOrContainer: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ValueOrContainer

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ValueOrContainer {
        return ValueOrContainer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ValueOrContainer) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ValueOrContainer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ValueOrContainer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeValueOrContainer_lift(_ pointer: UnsafeMutableRawPointer) throws -> ValueOrContainer {
    return try FfiConverterTypeValueOrContainer.lift(pointer)
}

public func FfiConverterTypeValueOrContainer_lower(_ value: ValueOrContainer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeValueOrContainer.lower(value)
}




public protocol VersionVectorProtocol : AnyObject {
    
    func getLast(peer: UInt64)  -> Int32?
    
    func includesId(id: Id)  -> Bool
    
    func includesVv(other: VersionVector)  -> Bool
    
}

open class VersionVector:
    VersionVectorProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    /// This constructor can be used to instantiate a fake object.
    /// - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    ///
    /// - Warning:
    ///     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_loro_fn_clone_versionvector(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_loro_fn_constructor_versionvector_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_loro_fn_free_versionvector(pointer, $0) }
    }

    

    
open func getLast(peer: UInt64) -> Int32? {
    return try!  FfiConverterOptionInt32.lift(try! rustCall() {
    uniffi_loro_fn_method_versionvector_get_last(self.uniffiClonePointer(),
        FfiConverterUInt64.lower(peer),$0
    )
})
}
    
open func includesId(id: Id) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_versionvector_includes_id(self.uniffiClonePointer(),
        FfiConverterTypeID.lower(id),$0
    )
})
}
    
open func includesVv(other: VersionVector) -> Bool {
    return try!  FfiConverterBool.lift(try! rustCall() {
    uniffi_loro_fn_method_versionvector_includes_vv(self.uniffiClonePointer(),
        FfiConverterTypeVersionVector.lower(other),$0
    )
})
}
    

}

public struct FfiConverterTypeVersionVector: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = VersionVector

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> VersionVector {
        return VersionVector(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: VersionVector) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VersionVector {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: VersionVector, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




public func FfiConverterTypeVersionVector_lift(_ pointer: UnsafeMutableRawPointer) throws -> VersionVector {
    return try FfiConverterTypeVersionVector.lift(pointer)
}

public func FfiConverterTypeVersionVector_lower(_ value: VersionVector) -> UnsafeMutableRawPointer {
    return FfiConverterTypeVersionVector.lower(value)
}


public struct Id {
    public var peer: UInt64
    public var counter: Int32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(peer: UInt64, counter: Int32) {
        self.peer = peer
        self.counter = counter
    }
}



extension Id: Equatable, Hashable {
    public static func ==(lhs: Id, rhs: Id) -> Bool {
        if lhs.peer != rhs.peer {
            return false
        }
        if lhs.counter != rhs.counter {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(peer)
        hasher.combine(counter)
    }
}


public struct FfiConverterTypeID: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Id {
        return
            try Id(
                peer: FfiConverterUInt64.read(from: &buf), 
                counter: FfiConverterInt32.read(from: &buf)
        )
    }

    public static func write(_ value: Id, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.peer, into: &buf)
        FfiConverterInt32.write(value.counter, into: &buf)
    }
}


public func FfiConverterTypeID_lift(_ buf: RustBuffer) throws -> Id {
    return try FfiConverterTypeID.lift(buf)
}

public func FfiConverterTypeID_lower(_ value: Id) -> RustBuffer {
    return FfiConverterTypeID.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ContainerId {
    
    case root(name: String, containerType: ContainerType
    )
    case normal(peer: UInt64, counter: Int32, containerType: ContainerType
    )
}


public struct FfiConverterTypeContainerID: FfiConverterRustBuffer {
    typealias SwiftType = ContainerId

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContainerId {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .root(name: try FfiConverterString.read(from: &buf), containerType: try FfiConverterTypeContainerType.read(from: &buf)
        )
        
        case 2: return .normal(peer: try FfiConverterUInt64.read(from: &buf), counter: try FfiConverterInt32.read(from: &buf), containerType: try FfiConverterTypeContainerType.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContainerId, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .root(name,containerType):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(name, into: &buf)
            FfiConverterTypeContainerType.write(containerType, into: &buf)
            
        
        case let .normal(peer,counter,containerType):
            writeInt(&buf, Int32(2))
            FfiConverterUInt64.write(peer, into: &buf)
            FfiConverterInt32.write(counter, into: &buf)
            FfiConverterTypeContainerType.write(containerType, into: &buf)
            
        }
    }
}


public func FfiConverterTypeContainerID_lift(_ buf: RustBuffer) throws -> ContainerId {
    return try FfiConverterTypeContainerID.lift(buf)
}

public func FfiConverterTypeContainerID_lower(_ value: ContainerId) -> RustBuffer {
    return FfiConverterTypeContainerID.lower(value)
}



extension ContainerId: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ContainerType {
    
    case text
    case map
    case list
    case movableList
    case tree
    case counter
    case unknown(kind: UInt8
    )
}


public struct FfiConverterTypeContainerType: FfiConverterRustBuffer {
    typealias SwiftType = ContainerType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContainerType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .text
        
        case 2: return .map
        
        case 3: return .list
        
        case 4: return .movableList
        
        case 5: return .tree
        
        case 6: return .counter
        
        case 7: return .unknown(kind: try FfiConverterUInt8.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContainerType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .text:
            writeInt(&buf, Int32(1))
        
        
        case .map:
            writeInt(&buf, Int32(2))
        
        
        case .list:
            writeInt(&buf, Int32(3))
        
        
        case .movableList:
            writeInt(&buf, Int32(4))
        
        
        case .tree:
            writeInt(&buf, Int32(5))
        
        
        case .counter:
            writeInt(&buf, Int32(6))
        
        
        case let .unknown(kind):
            writeInt(&buf, Int32(7))
            FfiConverterUInt8.write(kind, into: &buf)
            
        }
    }
}


public func FfiConverterTypeContainerType_lift(_ buf: RustBuffer) throws -> ContainerType {
    return try FfiConverterTypeContainerType.lift(buf)
}

public func FfiConverterTypeContainerType_lower(_ value: ContainerType) -> RustBuffer {
    return FfiConverterTypeContainerType.lower(value)
}



extension ContainerType: Equatable, Hashable {}




public enum LoroError {

    
    
    case UnmatchedContext(message: String)
    
    case DecodeVersionVectorError(message: String)
    
    case DecodeError(message: String)
    
    case DecodeDataCorruptionError(message: String)
    
    case DecodeChecksumMismatchError(message: String)
    
    case IncompatibleFutureEncodingError(message: String)
    
    case JsError(message: String)
    
    case LockError(message: String)
    
    case DuplicatedTransactionError(message: String)
    
    case NotFoundError(message: String)
    
    case TransactionError(message: String)
    
    case OutOfBound(message: String)
    
    case UsedOpId(message: String)
    
    case TreeError(message: String)
    
    case ArgErr(message: String)
    
    case AutoCommitNotStarted(message: String)
    
    case StyleConfigMissing(message: String)
    
    case Unknown(message: String)
    
    case FrontiersNotFound(message: String)
    
    case ImportWhenInTxn(message: String)
    
    case MisuseDetachedContainer(message: String)
    
    case NotImplemented(message: String)
    
    case ReattachAttachedContainer(message: String)
    
    case EditWhenDetached(message: String)
    
    case UndoInvalidIdSpan(message: String)
    
    case UndoWithDifferentPeerId(message: String)
    
    case InvalidJsonSchema(message: String)
    
    case Utf8InUnicodeCodePoint(message: String)
    
    case Utf16InUnicodeCodePoint(message: String)
    
    case EndIndexLessThanStartIndex(message: String)
    
    case InvalidRootContainerName(message: String)
    
}


public struct FfiConverterTypeLoroError: FfiConverterRustBuffer {
    typealias SwiftType = LoroError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .UnmatchedContext(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .DecodeVersionVectorError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .DecodeError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .DecodeDataCorruptionError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .DecodeChecksumMismatchError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .IncompatibleFutureEncodingError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .JsError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .LockError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .DuplicatedTransactionError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .NotFoundError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .TransactionError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .OutOfBound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .UsedOpId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .TreeError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 15: return .ArgErr(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 16: return .AutoCommitNotStarted(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 17: return .StyleConfigMissing(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 18: return .Unknown(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 19: return .FrontiersNotFound(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 20: return .ImportWhenInTxn(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 21: return .MisuseDetachedContainer(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 22: return .NotImplemented(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 23: return .ReattachAttachedContainer(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 24: return .EditWhenDetached(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 25: return .UndoInvalidIdSpan(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 26: return .UndoWithDifferentPeerId(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 27: return .InvalidJsonSchema(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 28: return .Utf8InUnicodeCodePoint(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 29: return .Utf16InUnicodeCodePoint(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 30: return .EndIndexLessThanStartIndex(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 31: return .InvalidRootContainerName(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LoroError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .UnmatchedContext(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .DecodeVersionVectorError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .DecodeError(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .DecodeDataCorruptionError(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .DecodeChecksumMismatchError(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .IncompatibleFutureEncodingError(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .JsError(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .LockError(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .DuplicatedTransactionError(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .NotFoundError(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))
        case .TransactionError(_ /* message is ignored*/):
            writeInt(&buf, Int32(11))
        case .OutOfBound(_ /* message is ignored*/):
            writeInt(&buf, Int32(12))
        case .UsedOpId(_ /* message is ignored*/):
            writeInt(&buf, Int32(13))
        case .TreeError(_ /* message is ignored*/):
            writeInt(&buf, Int32(14))
        case .ArgErr(_ /* message is ignored*/):
            writeInt(&buf, Int32(15))
        case .AutoCommitNotStarted(_ /* message is ignored*/):
            writeInt(&buf, Int32(16))
        case .StyleConfigMissing(_ /* message is ignored*/):
            writeInt(&buf, Int32(17))
        case .Unknown(_ /* message is ignored*/):
            writeInt(&buf, Int32(18))
        case .FrontiersNotFound(_ /* message is ignored*/):
            writeInt(&buf, Int32(19))
        case .ImportWhenInTxn(_ /* message is ignored*/):
            writeInt(&buf, Int32(20))
        case .MisuseDetachedContainer(_ /* message is ignored*/):
            writeInt(&buf, Int32(21))
        case .NotImplemented(_ /* message is ignored*/):
            writeInt(&buf, Int32(22))
        case .ReattachAttachedContainer(_ /* message is ignored*/):
            writeInt(&buf, Int32(23))
        case .EditWhenDetached(_ /* message is ignored*/):
            writeInt(&buf, Int32(24))
        case .UndoInvalidIdSpan(_ /* message is ignored*/):
            writeInt(&buf, Int32(25))
        case .UndoWithDifferentPeerId(_ /* message is ignored*/):
            writeInt(&buf, Int32(26))
        case .InvalidJsonSchema(_ /* message is ignored*/):
            writeInt(&buf, Int32(27))
        case .Utf8InUnicodeCodePoint(_ /* message is ignored*/):
            writeInt(&buf, Int32(28))
        case .Utf16InUnicodeCodePoint(_ /* message is ignored*/):
            writeInt(&buf, Int32(29))
        case .EndIndexLessThanStartIndex(_ /* message is ignored*/):
            writeInt(&buf, Int32(30))
        case .InvalidRootContainerName(_ /* message is ignored*/):
            writeInt(&buf, Int32(31))

        
        }
    }
}


extension LoroError: Equatable, Hashable {}

extension LoroError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum LoroValue {
    
    case null
    case bool(value: Bool
    )
    case double(value: Double
    )
    case i64(value: Int64
    )
    case binary(value: [UInt8]
    )
    case string(value: String
    )
    case list(value: [LoroValue]
    )
    case map(value: [String: LoroValue]
    )
    case container(value: ContainerId
    )
}


public struct FfiConverterTypeLoroValue: FfiConverterRustBuffer {
    typealias SwiftType = LoroValue

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoroValue {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .null
        
        case 2: return .bool(value: try FfiConverterBool.read(from: &buf)
        )
        
        case 3: return .double(value: try FfiConverterDouble.read(from: &buf)
        )
        
        case 4: return .i64(value: try FfiConverterInt64.read(from: &buf)
        )
        
        case 5: return .binary(value: try FfiConverterSequenceUInt8.read(from: &buf)
        )
        
        case 6: return .string(value: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .list(value: try FfiConverterSequenceTypeLoroValue.read(from: &buf)
        )
        
        case 8: return .map(value: try FfiConverterDictionaryStringTypeLoroValue.read(from: &buf)
        )
        
        case 9: return .container(value: try FfiConverterTypeContainerID.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LoroValue, into buf: inout [UInt8]) {
        switch value {
        
        
        case .null:
            writeInt(&buf, Int32(1))
        
        
        case let .bool(value):
            writeInt(&buf, Int32(2))
            FfiConverterBool.write(value, into: &buf)
            
        
        case let .double(value):
            writeInt(&buf, Int32(3))
            FfiConverterDouble.write(value, into: &buf)
            
        
        case let .i64(value):
            writeInt(&buf, Int32(4))
            FfiConverterInt64.write(value, into: &buf)
            
        
        case let .binary(value):
            writeInt(&buf, Int32(5))
            FfiConverterSequenceUInt8.write(value, into: &buf)
            
        
        case let .string(value):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(value, into: &buf)
            
        
        case let .list(value):
            writeInt(&buf, Int32(7))
            FfiConverterSequenceTypeLoroValue.write(value, into: &buf)
            
        
        case let .map(value):
            writeInt(&buf, Int32(8))
            FfiConverterDictionaryStringTypeLoroValue.write(value, into: &buf)
            
        
        case let .container(value):
            writeInt(&buf, Int32(9))
            FfiConverterTypeContainerID.write(value, into: &buf)
            
        }
    }
}


public func FfiConverterTypeLoroValue_lift(_ buf: RustBuffer) throws -> LoroValue {
    return try FfiConverterTypeLoroValue.lift(buf)
}

public func FfiConverterTypeLoroValue_lower(_ value: LoroValue) -> RustBuffer {
    return FfiConverterTypeLoroValue.lower(value)
}



extension LoroValue: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Side {
    
    case left
    case middle
    case right
}


public struct FfiConverterTypeSide: FfiConverterRustBuffer {
    typealias SwiftType = Side

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Side {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .left
        
        case 2: return .middle
        
        case 3: return .right
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Side, into buf: inout [UInt8]) {
        switch value {
        
        
        case .left:
            writeInt(&buf, Int32(1))
        
        
        case .middle:
            writeInt(&buf, Int32(2))
        
        
        case .right:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeSide_lift(_ buf: RustBuffer) throws -> Side {
    return try FfiConverterTypeSide.lift(buf)
}

public func FfiConverterTypeSide_lower(_ value: Side) -> RustBuffer {
    return FfiConverterTypeSide.lower(value)
}



extension Side: Equatable, Hashable {}



fileprivate struct FfiConverterOptionInt32: FfiConverterRustBuffer {
    typealias SwiftType = Int32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeCursor: FfiConverterRustBuffer {
    typealias SwiftType = Cursor?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCursor.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCursor.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeValueOrContainer: FfiConverterRustBuffer {
    typealias SwiftType = ValueOrContainer?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeValueOrContainer.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeValueOrContainer.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeVersionVector: FfiConverterRustBuffer {
    typealias SwiftType = VersionVector?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeVersionVector.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeVersionVector.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeID: FfiConverterRustBuffer {
    typealias SwiftType = Id?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeID.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeID.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeContainerID: FfiConverterRustBuffer {
    typealias SwiftType = ContainerId?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeContainerID.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeContainerID.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeLoroValue: FfiConverterRustBuffer {
    typealias SwiftType = LoroValue?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeLoroValue.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeLoroValue.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceData: FfiConverterRustBuffer {
    typealias SwiftType = [Data]

    public static func write(_ value: [Data], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterData.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Data] {
        let len: Int32 = try readInt(&buf)
        var seq = [Data]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterData.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeLoroValue: FfiConverterRustBuffer {
    typealias SwiftType = [LoroValue]

    public static func write(_ value: [LoroValue], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLoroValue.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [LoroValue] {
        let len: Int32 = try readInt(&buf)
        var seq = [LoroValue]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeLoroValue.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterDictionaryStringTypeLoroValue: FfiConverterRustBuffer {
    public static func write(_ value: [String: LoroValue], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeLoroValue.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: LoroValue] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: LoroValue]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeLoroValue.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias SubId = UInt32
public struct FfiConverterTypeSubID: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SubId {
        return try FfiConverterUInt32.read(from: &buf)
    }

    public static func write(_ value: SubId, into buf: inout [UInt8]) {
        return FfiConverterUInt32.write(value, into: &buf)
    }

    public static func lift(_ value: UInt32) throws -> SubId {
        return try FfiConverterUInt32.lift(value)
    }

    public static func lower(_ value: SubId) -> UInt32 {
        return FfiConverterUInt32.lower(value)
    }
}


public func FfiConverterTypeSubID_lift(_ value: UInt32) throws -> SubId {
    return try FfiConverterTypeSubID.lift(value)
}

public func FfiConverterTypeSubID_lower(_ value: SubId) -> UInt32 {
    return FfiConverterTypeSubID.lower(value)
}


private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_loro_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_attach() != 7252) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_check_state_correctness_slow() != 43878) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_checkout() != 415) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_checkout_to_latest() != 2349) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_commit() != 53174) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_detach() != 61399) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_export_from() != 2990) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_export_snapshot() != 8377) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_fork() != 45665) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_frontiers_to_vv() != 11123) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_counter() != 45614) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_deep_value() != 3404) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_list() != 36875) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_map() != 58175) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_movable_list() != 56244) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_text() != 3885) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_get_tree() != 41111) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_import() != 8639) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_import_batch() != 60062) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_import_with() != 59166) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_is_detached() != 30909) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_len_changes() != 62401) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_len_ops() != 11644) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_log_estimate_size() != 19429) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_oplog_frontiers() != 49043) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_oplog_vv() != 56754) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_peer_id() != 35449) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_set_change_merge_interval() != 55133) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_set_fractional_index_jitter() != 47450) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_set_peer_id() != 29379) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_set_record_timestamp() != 15945) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_state_frontiers() != 17079) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_state_vv() != 1627) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_unsubscribe() != 32901) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorodoc_vv_to_frontiers() != 47960) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_delete() != 40414) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_get() != 36174) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_get_cursor() != 42636) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_get_deep_value() != 9355) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_get_value() != 14384) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_id() != 33887) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert() != 19544) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert_counter_container() != 41569) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert_list_container() != 42165) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert_map_container() != 25622) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert_movable_list_container() != 23559) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert_text_container() != 26631) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_insert_tree_container() != 15665) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_pop() != 20748) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorolist_push() != 32091) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_insert() != 10847) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorotext_to_string() != 63765) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_lorovaluelike_as_loro_value() != 23668) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_as_container() != 61163) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_as_value() != 9638) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_is_container() != 16329) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_valueorcontainer_is_value() != 13911) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_get_last() != 45434) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_includes_id() != 50408) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_method_versionvector_includes_vv() != 23089) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_cursor_new() != 11721) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_lorocounter_new() != 44867) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_lorodoc_new() != 54129) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_lorolist_new() != 2861) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_loromap_new() != 63806) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_loromovablelist_new() != 32944) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_lorotext_new() != 33191) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_lorotree_new() != 42150) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_loro_checksum_constructor_versionvector_new() != 31126) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitLoroValueLike()
    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all