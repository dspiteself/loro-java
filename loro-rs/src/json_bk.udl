dictionary JsonSchema{
    u8 schema_version;
    Frontiers start_version;
    sequence<u64> peers;
    sequence<JsonChange> changes;
};

dictionary JsonChange{
    ID id;
    i64 timestamp;
    sequence<ID> deps;
    u32 Lamport;
    string? msg;
    sequence<JsonOp> ops;
};

dictionary JsonOp{
    JsonOpContent content;
    ContainerID container;
    i32 counter;
};

[Enum]
interface JsonOpContent{
    List(JsonListOp);
    MovableList(JsonMovableListOp);
    Map(JsonMapOp);
    Text(JsonTextOp);
    Tree(JsonTreeOp);
    Future(JsonFutureOpWrapper);
};

dictionary JsonFutureOpWrapper{
    JsonFutureOp value;
    i32 prop;
};

[Enum]
interface JsonListOp{
    Insert(u32 pos, LoroValue value);
    Delete(i32 pos, i32 len, ID start_id);
};

[Enum]
interface JsonMovableListOp{
    Insert(u32 pos, LoroValue value);
    Delete(i32 pos, i32 len, ID start_id);
    Move(u32 from, u32 to, IdLp elem_id);
    Set(IdLp elem_id, LoroValue value);
};

[Enum]
interface JsonMapOp{
    Insert(string key, LoroValue value);
    Delete(string key);
};

[Enum]
interface JsonTextOp{
    Insert(u32 pos, string text);
    Delete(i32 pos, i32 len, ID start_id);
    Mark(u32 start, u32 end, string style_key, LoroValue style_value, u8 info);
    MarkEnd();
};

[Enum]
interface JsonTreeOp{
    Create(TreeID target, TreeID? parent, FractionalIndex fractional_index);
    Move(TreeID target, TreeID? parent, FractionalIndex fractional_index);
    Delete(TreeID target);
};

[Enum]
interface JsonFutureOp{
    Counter(OwnedValue value);
    Unknown(OwnedValue value);
};